const Perj = require('../src/perj')
const Tool = require('./tool')
const tool = new Tool()
const write = tool.write.bind(tool)
const passThrough = true

class AppError extends Error {
  constructor (message, status) {
    super(message)
    this.name = this.constructor.name
    Error.captureStackTrace(this, this.constructor)
    this.status = status || 500
  }
}
class CommsError extends AppError {
  constructor (message, ip) {
    super(message)
    this.name = this.constructor.name
    Error.captureStackTrace(this, this.constructor)
    this.ip = ip || '0.0.0.0'
  }
}
const stdError = new Error('standard')
const extError = new Error('extended error')
const appError = new AppError('app error', 42)
const commsError = new CommsError('comms error', '1.2.3.4')

beforeEach(() => {
  tool.reset()
})

describe('serialize error tests', () => {
  test('default serialize empty error test', () => {
    let log = new Perj({ passThrough, write })
    log.error(new Error())
    expect(tool.jsonOut.level).toBe('error')
    expect(tool.objOut.level).toBe('error')
    expect(tool.jsonOut.lvl).toBe(50)
    expect(tool.objOut.lvl).toBe(50)
    expect(tool.getType(tool.jsonOut.time)).toBe('Number')
    expect(tool.getType(tool.objOut.time)).toBe('Number')
    expect(tool.jsonOut.msg).toBe('')
    expect(tool.objOut.msg).toBe('')
    expect(Object.keys(tool.jsonOut.data).length).toBe(4)
    expect(Object.keys(tool.objOut.data).length).toBe(4)
    expect(tool.jsonOut.data.constructor).toBe('Error')
    expect(tool.objOut.data.constructor).toBe('Error')
    expect(tool.jsonOut.data.name).toBe('Error')
    expect(tool.objOut.data.name).toBe('Error')
    expect(tool.jsonOut.data.message).toBeUndefined()
    expect(tool.objOut.data.message).toBeUndefined()
    expect(tool.getType(tool.jsonOut.data.stack)).toBe('String')
    expect(tool.getType(tool.objOut.data.stack)).toBe('String')
  })
  test('default serialize standard error test', () => {
    let log = new Perj({ passThrough, write })
    log.error(stdError)
    expect(tool.jsonOut.level).toBe('error')
    expect(tool.objOut.level).toBe('error')
    expect(tool.jsonOut.lvl).toBe(50)
    expect(tool.objOut.lvl).toBe(50)
    expect(tool.getType(tool.jsonOut.time)).toBe('Number')
    expect(tool.getType(tool.objOut.time)).toBe('Number')
    expect(tool.jsonOut.msg).toBe('standard')
    expect(tool.objOut.msg).toBe('standard')
    expect(Object.keys(tool.jsonOut.data).length).toBe(5)
    expect(Object.keys(tool.objOut.data).length).toBe(5)
    expect(tool.jsonOut.data.constructor).toBe('Error')
    expect(tool.objOut.data.constructor).toBe('Error')
    expect(tool.jsonOut.data.name).toBe('Error')
    expect(tool.objOut.data.name).toBe('Error')
    expect(tool.jsonOut.data.message).toBe('standard')
    expect(tool.objOut.data.message).toBe('standard')
    expect(tool.getType(tool.jsonOut.data.stack)).toBe('String')
    expect(tool.getType(tool.objOut.data.stack)).toBe('String')
  })
  test('default serialize multiple standard error test', () => {
    let log = new Perj({ passThrough, write })
    let err = new Error('standard2')
    log.error(stdError, err)
    expect(tool.jsonOut.level).toBe('error')
    expect(tool.objOut.level).toBe('error')
    expect(tool.jsonOut.lvl).toBe(50)
    expect(tool.objOut.lvl).toBe(50)
    expect(tool.getType(tool.jsonOut.time)).toBe('Number')
    expect(tool.getType(tool.objOut.time)).toBe('Number')
    expect(tool.jsonOut.msg).toBe('standard')
    expect(tool.objOut.msg).toBe('standard')
    expect(tool.jsonOut.data.length).toBe(2)
    expect(tool.objOut.data.length).toBe(2)
    expect(Object.keys(tool.jsonOut.data[0]).length).toBe(5)
    expect(Object.keys(tool.objOut.data[0]).length).toBe(5)
    expect(tool.jsonOut.data[0].constructor).toBe('Error')
    expect(tool.objOut.data[0].constructor).toBe('Error')
    expect(tool.jsonOut.data[0].name).toBe('Error')
    expect(tool.objOut.data[0].name).toBe('Error')
    expect(tool.jsonOut.data[0].message).toBe('standard')
    expect(tool.objOut.data[0].message).toBe('standard')
    expect(tool.getType(tool.jsonOut.data[0].stack)).toBe('String')
    expect(tool.getType(tool.objOut.data[0].stack)).toBe('String')
    expect(Object.keys(tool.jsonOut.data[1]).length).toBe(5)
    expect(Object.keys(tool.objOut.data[1]).length).toBe(5)
    expect(tool.jsonOut.data[1].constructor).toBe('Error')
    expect(tool.objOut.data[1].constructor).toBe('Error')
    expect(tool.jsonOut.data[1].name).toBe('Error')
    expect(tool.objOut.data[1].name).toBe('Error')
    expect(tool.jsonOut.data[1].message).toBe('standard2')
    expect(tool.objOut.data[1].message).toBe('standard2')
    expect(tool.getType(tool.jsonOut.data[1].stack)).toBe('String')
    expect(tool.getType(tool.objOut.data[1].stack)).toBe('String')
  })
  test('default serialize extended error test', () => {
    let log = new Perj({ passThrough, write })
    const extraError = new Error('extra')
    extraError.widget = { foo: { bar: { baz: true } } }
    extError.innerException = extraError
    extError.plumbus = [1, 2, 3]
    log.error(extError)
    expect(tool.jsonOut.level).toBe('error')
    expect(tool.objOut.level).toBe('error')
    expect(tool.jsonOut.lvl).toBe(50)
    expect(tool.objOut.lvl).toBe(50)
    expect(tool.getType(tool.jsonOut.time)).toBe('Number')
    expect(tool.getType(tool.objOut.time)).toBe('Number')
    expect(tool.jsonOut.msg).toBe('extended error')
    expect(tool.objOut.msg).toBe('extended error')
    expect(Object.keys(tool.jsonOut.data).length).toBe(7)
    expect(Object.keys(tool.objOut.data).length).toBe(7)
    expect(tool.jsonOut.data.constructor).toBe('Error')
    expect(tool.objOut.data.constructor).toBe('Error')
    expect(tool.jsonOut.data.name).toBe('Error')
    expect(tool.objOut.data.name).toBe('Error')
    expect(tool.jsonOut.data.message).toBe('extended error')
    expect(tool.objOut.data.message).toBe('extended error')
    expect(tool.getType(tool.jsonOut.data.stack)).toBe('String')
    expect(tool.getType(tool.objOut.data.stack)).toBe('String')
    expect(Array.isArray(tool.jsonOut.data.plumbus)).toBe(true)
    expect(Array.isArray(tool.objOut.data.plumbus)).toBe(true)
    expect(tool.jsonOut.data.plumbus.length).toBe(3)
    expect(tool.objOut.data.plumbus.length).toBe(3)
    expect(tool.jsonOut.data.plumbus[1]).toBe(2)
    expect(tool.objOut.data.plumbus[1]).toBe(2)
    expect(Object.keys(tool.jsonOut.data.innerException).length).toBe(6)
    expect(Object.keys(tool.objOut.data.innerException).length).toBe(6)
    expect(tool.jsonOut.data.innerException.constructor).toBe('Error')
    expect(tool.objOut.data.innerException.constructor).toBe('Error')
    expect(tool.jsonOut.data.innerException.name).toBe('Error')
    expect(tool.objOut.data.innerException.name).toBe('Error')
    expect(tool.jsonOut.data.innerException.message).toBe('extra')
    expect(tool.objOut.data.innerException.message).toBe('extra')
    expect(tool.getType(tool.jsonOut.data.innerException.stack)).toBe('String')
    expect(tool.getType(tool.objOut.data.innerException.stack)).toBe('String')
    expect(tool.objOut.data.innerException.widget.foo.bar.baz).toBe(true)
  })
  test('default serialize app error test', () => {
    let log = new Perj({ passThrough, write })
    log.error(appError)
    expect(tool.jsonOut.level).toBe('error')
    expect(tool.objOut.level).toBe('error')
    expect(tool.jsonOut.lvl).toBe(50)
    expect(tool.objOut.lvl).toBe(50)
    expect(tool.getType(tool.jsonOut.time)).toBe('Number')
    expect(tool.getType(tool.objOut.time)).toBe('Number')
    expect(tool.jsonOut.msg).toBe('app error')
    expect(tool.objOut.msg).toBe('app error')
    expect(Object.keys(tool.jsonOut.data).length).toBe(6)
    expect(Object.keys(tool.objOut.data).length).toBe(6)
    expect(tool.jsonOut.data.constructor).toBe('AppError')
    expect(tool.objOut.data.constructor).toBe('AppError')
    expect(tool.jsonOut.data.name).toBe('AppError')
    expect(tool.objOut.data.name).toBe('AppError')
    expect(tool.jsonOut.data.message).toBe('app error')
    expect(tool.objOut.data.message).toBe('app error')
    expect(tool.getType(tool.jsonOut.data.stack)).toBe('String')
    expect(tool.getType(tool.objOut.data.stack)).toBe('String')
    expect(tool.jsonOut.data.status).toBe(42)
    expect(tool.objOut.data.status).toBe(42)
    expect(Object.keys(tool.jsonOut.data.AppError).length).toBe(3)
    expect(Object.keys(tool.objOut.data.AppError).length).toBe(3)
    expect(tool.jsonOut.data.AppError.constructor).toBe('AppError')
    expect(tool.objOut.data.AppError.constructor).toBe('AppError')
    expect(tool.jsonOut.data.AppError.name).toBe('Error')
    expect(tool.objOut.data.AppError.name).toBe('Error')
    expect(tool.jsonOut.data.AppError.message).toBeUndefined()
    expect(tool.objOut.data.AppError.message).toBeUndefined()
    expect(tool.jsonOut.data.AppError.stack).toBeUndefined()
    expect(tool.objOut.data.AppError.stack).toBeUndefined()
  })
  test('default serialize comms error test', () => {
    let log = new Perj({ passThrough, write })
    log.error(commsError)
    expect(tool.jsonOut.level).toBe('error')
    expect(tool.objOut.level).toBe('error')
    expect(tool.jsonOut.lvl).toBe(50)
    expect(tool.objOut.lvl).toBe(50)
    expect(tool.getType(tool.jsonOut.time)).toBe('Number')
    expect(tool.getType(tool.objOut.time)).toBe('Number')
    expect(tool.jsonOut.msg).toBe('comms error')
    expect(tool.objOut.msg).toBe('comms error')
    expect(Object.keys(tool.jsonOut.data).length).toBe(7)
    expect(Object.keys(tool.objOut.data).length).toBe(7)
    expect(tool.jsonOut.data.constructor).toBe('CommsError')
    expect(tool.objOut.data.constructor).toBe('CommsError')
    expect(tool.jsonOut.data.name).toBe('CommsError')
    expect(tool.objOut.data.name).toBe('CommsError')
    expect(tool.jsonOut.data.message).toBe('comms error')
    expect(tool.objOut.data.message).toBe('comms error')
    expect(tool.getType(tool.jsonOut.data.stack)).toBe('String')
    expect(tool.getType(tool.objOut.data.stack)).toBe('String')
    expect(tool.jsonOut.data.status).toBe(500)
    expect(tool.objOut.data.status).toBe(500)
    expect(tool.jsonOut.data.ip).toBe('1.2.3.4')
    expect(tool.objOut.data.ip).toBe('1.2.3.4')
    expect(Object.keys(tool.jsonOut.data.CommsError).length).toBe(3)
    expect(Object.keys(tool.objOut.data.CommsError).length).toBe(3)
    expect(tool.jsonOut.data.CommsError.constructor).toBe('CommsError')
    expect(tool.objOut.data.CommsError.constructor).toBe('CommsError')
    expect(tool.jsonOut.data.CommsError.name).toBe('Error')
    expect(tool.objOut.data.CommsError.name).toBe('Error')
    expect(tool.jsonOut.data.CommsError.message).toBeUndefined()
    expect(tool.objOut.data.CommsError.message).toBeUndefined()
    expect(tool.jsonOut.data.CommsError.stack).toBeUndefined()
    expect(tool.objOut.data.CommsError.stack).toBeUndefined()
  })
  test('simple serialize standard error test', () => {
    let log = new Perj({ serializeErrorFunction: simpleSerializer, passThrough, write })
    log.error(stdError)
    expect(tool.jsonOut.level).toBe('error')
    expect(tool.objOut.level).toBe('error')
    expect(tool.jsonOut.lvl).toBe(50)
    expect(tool.objOut.lvl).toBe(50)
    expect(tool.getType(tool.jsonOut.time)).toBe('Number')
    expect(tool.getType(tool.objOut.time)).toBe('Number')
    expect(tool.jsonOut.msg).toBe('standard')
    expect(tool.objOut.msg).toBe('standard')
    expect(Object.keys(tool.jsonOut.data).length).toBe(3)
    expect(Object.keys(tool.objOut.data).length).toBe(3)
    expect(tool.getType(tool.jsonOut.data.constructor)).toBe('Function')
    expect(tool.getType(tool.objOut.data.constructor)).toBe('Function')
    expect(tool.jsonOut.data.name).toBe('Error')
    expect(tool.objOut.data.name).toBe('Error')
    expect(tool.jsonOut.data.message).toBe('standard')
    expect(tool.objOut.data.message).toBe('standard')
    expect(tool.getType(tool.jsonOut.data.stack)).toBe('String')
    expect(tool.getType(tool.objOut.data.stack)).toBe('String')
  })
})

function simpleSerializer (value) {
  const { name, message, stack } = value
  return { name, message, stack }
}
