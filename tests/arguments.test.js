const Perj = require('../src/perj')
const Tool = require('./tool')
const tool = new Tool()
const data = require('../data')
const write = tool.write.bind(tool)
const passThrough = true

let log = new Perj({ write, passThrough })

beforeEach(() => {
  tool.reset()
})

describe('log argument tests', () => {
  for (const level of Object.keys(log.levels)) {
    log = new Perj({ level: level, write, passThrough })

    test(level + ': empty', () => {
      log[level]()
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe('')
      expect(tool.objOut.msg).toBe('')
      expect(tool.jsonOut.data).toBe(null)
      expect(tool.objOut.data).toBe(null)
    })
    test(level + ': one undefined', () => {
      log[level](undefined)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe('')
      expect(tool.objOut.msg).toBe('')
      expect(tool.jsonOut.data).toBe(null)
      expect(tool.objOut.data).toBe(null)
    })
    test(level + ': two undefined', () => {
      log[level](undefined, undefined)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe('')
      expect(tool.objOut.msg).toBe('')
      expect(tool.jsonOut.data[0]).toBe(null)
      expect(tool.jsonOut.data[1]).toBe(null)
      expect(tool.objOut.data[0]).toBe(null)
      expect(tool.objOut.data[1]).toBe(null)
    })
    test(level + ': one null primitive', () => {
      log[level](null)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe('')
      expect(tool.objOut.msg).toBe('')
      expect(tool.jsonOut.data).toBe(null)
      expect(tool.objOut.data).toBe(null)
    })
    test(level + ': two null primitives', () => {
      log[level](null, null)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe('')
      expect(tool.objOut.msg).toBe('')
      expect(tool.jsonOut.data[0]).toBe(null)
      expect(tool.objOut.data[0]).toBe(null)
      expect(tool.jsonOut.data[1]).toBe(null)
      expect(tool.objOut.data[1]).toBe(null)
    })
    test(level + ': one number primitive', () => {
      log[level](42)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe('')
      expect(tool.objOut.msg).toBe('')
      expect(tool.jsonOut.data).toBe(42)
      expect(tool.objOut.data).toBe(42)
    })
    test(level + ': two number primitives', () => {
      log[level](42, 43)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe('')
      expect(tool.objOut.msg).toBe('')
      expect(tool.jsonOut.data[0]).toBe(42)
      expect(tool.objOut.data[0]).toBe(42)
      expect(tool.jsonOut.data[1]).toBe(43)
      expect(tool.objOut.data[1]).toBe(43)
    })
    test(level + ': one boolean primitive', () => {
      log[level](true)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe('')
      expect(tool.objOut.msg).toBe('')
      expect(tool.jsonOut.data).toBe(true)
      expect(tool.objOut.data).toBe(true)
    })
    test(level + ': two boolean primitives', () => {
      log[level](true, false)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe('')
      expect(tool.objOut.msg).toBe('')
      expect(tool.jsonOut.data[0]).toBe(true)
      expect(tool.objOut.data[0]).toBe(true)
      expect(tool.jsonOut.data[1]).toBe(false)
      expect(tool.objOut.data[1]).toBe(false)
    })
    test(level + ': one message', () => {
      log[level](data.msg[0])
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe(data.msg[0])
      expect(tool.objOut.msg).toBe(data.msg[0])
      expect(tool.jsonOut.data).toBe(null)
      expect(tool.objOut.data).toBe(null)
    })
    test(level + ': two messages', () => {
      log[level](data.msg[0], data.msg[1])
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.getType(tool.jsonOut.msg)).toBe('String')
      expect(tool.getType(tool.objOut.msg)).toBe('String')
      expect(tool.jsonOut.msg).toBe(data.msg[0])
      expect(tool.objOut.msg).toBe(data.msg[0])
      expect(tool.getType(tool.jsonOut.data)).toBe('String')
      expect(tool.getType(tool.objOut.data)).toBe('String')
      expect(tool.jsonOut.data).toBe(data.msg[1])
      expect(tool.objOut.data).toBe(data.msg[1])
    })
    test(level + ': one object', () => {
      log[level](data.tardis)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe('')
      expect(tool.objOut.msg).toBe('')
      expect(tool.jsonOut.data).toMatchObject(data.tardis)
      expect(data.tardis).toMatchObject(tool.jsonOut.data)
      expect(tool.objOut.data).toMatchObject(data.tardis)
      expect(data.tardis).toMatchObject(tool.objOut.data)
    })
    test(level + ': two objects', () => {
      log[level](data.tardis, data.serenity)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.jsonOut.msg).toBe('')
      expect(tool.objOut.msg).toBe('')
      expect(tool.jsonOut.data[0]).toMatchObject(data.tardis)
      expect(data.tardis).toMatchObject(tool.jsonOut.data[0])
      expect(tool.objOut.data[0]).toMatchObject(data.tardis)
      expect(data.tardis).toMatchObject(tool.objOut.data[0])
      expect(tool.jsonOut.data[1]).toMatchObject(data.serenity)
      expect(data.serenity).toMatchObject(tool.jsonOut.data[1])
      expect(tool.objOut.data[1]).toMatchObject(data.serenity)
      expect(data.serenity).toMatchObject(tool.objOut.data[1])
    })
    test(level + ': two messages one data', () => {
      log[level](data.msg[0], data.msg[1], data.tardis)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.getType(tool.jsonOut.msg)).toBe('String')
      expect(tool.getType(tool.objOut.msg)).toBe('String')
      expect(tool.jsonOut.msg).toBe(data.msg[0])
      expect(tool.objOut.msg).toBe(data.msg[0])
      expect(tool.getType(tool.jsonOut.data)).toBe('Array')
      expect(tool.getType(tool.objOut.data)).toBe('Array')
      expect(tool.jsonOut.data[0]).toBe(data.msg[1])
      expect(tool.objOut.data[0]).toBe(data.msg[1])
      expect(tool.jsonOut.data[1]).toMatchObject(data.tardis)
      expect(tool.objOut.data[1]).toMatchObject(data.tardis)
      expect(data.tardis).toMatchObject(tool.jsonOut.data[1])
      expect(data.tardis).toMatchObject(tool.objOut.data[1])
    })
    test(level + ': two messages two data', () => {
      log[level](data.msg[0], data.msg[1], data.tardis, data.serenity)
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.getType(tool.jsonOut.msg)).toBe('String')
      expect(tool.getType(tool.objOut.msg)).toBe('String')
      expect(tool.jsonOut.msg).toBe(data.msg[0])
      expect(tool.objOut.msg).toBe(data.msg[0])
      expect(tool.getType(tool.jsonOut.data)).toBe('Array')
      expect(tool.getType(tool.objOut.data)).toBe('Array')
      expect(tool.jsonOut.data.length).toBe(3)
      expect(tool.objOut.data.length).toBe(3)
      expect(tool.jsonOut.data[0]).toBe(data.msg[1])
      expect(tool.objOut.data[0]).toBe(data.msg[1])
      expect(tool.jsonOut.data[1]).toMatchObject(data.tardis)
      expect(tool.objOut.data[1]).toMatchObject(data.tardis)
      expect(data.tardis).toMatchObject(tool.jsonOut.data[1])
      expect(data.tardis).toMatchObject(tool.objOut.data[1])
      expect(tool.jsonOut.data[2]).toMatchObject(data.serenity)
      expect(tool.objOut.data[2]).toMatchObject(data.serenity)
      expect(data.serenity).toMatchObject(tool.jsonOut.data[2])
      expect(data.serenity).toMatchObject(tool.objOut.data[2])
    })
    test(level + ': two messages two data mixed order', () => {
      log[level](data.tardis, data.msg[1], data.serenity, data.msg[0])
      expect(Object.keys(tool.jsonOut).length).toBe(5)
      expect(Object.keys(tool.objOut).length).toBe(5)
      expect(tool.getType(tool.jsonOut.time)).toBe('Number')
      expect(tool.getType(tool.objOut.time)).toBe('Number')
      expect(tool.jsonOut.level).toBe(level)
      expect(tool.objOut.level).toBe(level)
      expect(tool.getType(tool.jsonOut.msg)).toBe('String')
      expect(tool.getType(tool.objOut.msg)).toBe('String')
      expect(tool.jsonOut.msg).toBe(data.msg[1])
      expect(tool.objOut.msg).toBe(data.msg[1])
      expect(tool.getType(tool.jsonOut.data)).toBe('Array')
      expect(tool.getType(tool.objOut.data)).toBe('Array')
      expect(tool.jsonOut.data.length).toBe(3)
      expect(tool.objOut.data.length).toBe(3)
      expect(tool.jsonOut.data[0]).toMatchObject(data.tardis)
      expect(tool.objOut.data[0]).toMatchObject(data.tardis)
      expect(data.tardis).toMatchObject(tool.jsonOut.data[0])
      expect(data.tardis).toMatchObject(tool.objOut.data[0])
      expect(tool.jsonOut.data[1]).toMatchObject(data.serenity)
      expect(tool.objOut.data[1]).toMatchObject(data.serenity)
      expect(data.serenity).toMatchObject(tool.jsonOut.data[1])
      expect(data.serenity).toMatchObject(tool.objOut.data[1])
      expect(tool.jsonOut.data[2]).toBe(data.msg[0])
      expect(tool.objOut.data[2]).toBe(data.msg[0])
    })
  }
})
