const { Perj } = require('../src/perj')
const Tool = require('./tool')
const tool = new Tool()
const data = require('../data')
const write = tool.write.bind(tool)

beforeEach(() => {
  tool.reset()
})

describe('logging error tests', () => {
  const log = new Perj({level: 'trace', write, name: 'error tests'})
  let err1 = new Error(data.msg[0])
  let err2 = new Error(data.msg[1])

  test('error level test', () => {
    log.error(err1)
    expect(tool.jsonOut.msg).toBe(err1.message)
    expect(tool.jsonOut.data.message).toBe(err1.message)
    expect(tool.jsonOut.data.name).toBe('Error')
    expect(tool.jsonOut.data.stack).toBeDefined()
    log.error(err1, err2)
    expect(tool.jsonOut.msg).toBe(err1.message)
    expect(tool.jsonOut.data.length).toBe(2)
    expect(tool.jsonOut.data[0].message).toBe(data.msg[0])
    expect(tool.jsonOut.data[1].message).toBe(data.msg[1])
    expect(tool.jsonOut.data[0].name).toBe('Error')
    expect(tool.jsonOut.data[1].name).toBe('Error')
    expect(tool.jsonOut.data[0].stack).toBeDefined()
    expect(tool.jsonOut.data[1].stack).toBeDefined()
  })
  test('info level test', () => {
    log.info(err1)
    expect(tool.jsonOut.msg).toBe(err1.message)
    expect(tool.jsonOut.data.message).toBe(err1.message)
    expect(tool.jsonOut.data.name).toBe('Error')
    expect(tool.jsonOut.data.stack).toBeDefined()
    log.info(err1, err2)
    expect(tool.jsonOut.msg).toBe(err1.message)
    expect(tool.jsonOut.data.length).toBe(2)
    expect(tool.jsonOut.data[0].message).toBe(err1.message)
    expect(tool.jsonOut.data[1].message).toBe(err2.message)
    expect(tool.jsonOut.data[0].name).toBe('Error')
    expect(tool.jsonOut.data[1].name).toBe('Error')
    expect(tool.jsonOut.data[0].stack).toBeDefined()
    expect(tool.jsonOut.data[1].stack).toBeDefined()
    log.info(data.msg[2], err1, data.msg[3], err2)
    expect(tool.jsonOut.msg).toBe(data.msg[2])
    expect(tool.jsonOut.data.length).toBe(3)
    expect(tool.jsonOut.data[0].message).toBe(err1.message)
    expect(tool.jsonOut.data[1]).toBe(data.msg[3])
    expect(tool.jsonOut.data[2].message).toBe(err2.message)
    expect(tool.jsonOut.data[0].name).toBe('Error')
    expect(tool.jsonOut.data[2].name).toBe('Error')
    expect(tool.jsonOut.data[0].stack).toBeDefined()
    expect(tool.jsonOut.data[2].stack).toBeDefined()
  })
})
